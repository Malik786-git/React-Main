---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
                                                 React Fragment
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
(Ref file App.js to index.js)
Fragment is used to group a list of children without adding extra nodes to the DOM

Example:
<React.Fragment>
<h1>Hello world</h1>      
</React.Fragment>

Also Fragment use key attribute;
<React.Fragment key={id}>
<h1>{item.title}</h1>      
<p>{item.description}</p>      
</React.Fragment>


----------------------------------------------------------------------------------
Function Component;
It is a JS function which accepts a single "props" object argument with data and return a React Element..



function fun1(props) {
    return <h1>Hello</h1>
}

const fun1  =  (props) => <h1>Hello {props.name}</h1>


----------------------------------------------------------------------------------

Class Component
A class Component required you to extend from React.Component. The class must implement a render() member
function which return a React Component to be rendered, similar to a return value of a function Component. 
In a class-based Component, props are accessible via this.props.

class App extends Component {
    render(){
        return <h1>Hello </h1>
    }
}



----------------------------------------------------------------------------------
Rendering a Component; (ref Student.js)


ReactDOM.render(<Student/>, document.getElementById('root'));
ReactDOM.render(<Student name="malik"/>, document.getElementById('root'));

example...  

function Studnet(props) {
    return <h1>Hello {props.name}</h1>
}
ReactDOM.render(<Student name="malik"/>, document.getElementById('root'));

Note: yha per Studnet Component me jo name attribute hy, jab ReactDOM.render isy run kare ga tu name ki value 
      is Component ke props me bhej dega.


-----------------------------------------------------------------------------------
ref Teacher.js to App.js to index.js

Composing Component (use same Component for multiple value)
Component can refer to other Component in their output. This lets us use the same Component abstraction for any level of detail.


function Teacher(props) {
    return <h1>Hello {props.name}</h1>
}


function App(){
    return (
        <div>
              <Teacher/>
              <Teacher/>
              <Teacher/>
        </div>
    )
}

ReactDOM.render(<App/>, document.getElementById('root'));

here ReactDom render App-component and App render 3 component of Teacher 

--------------------------------------------------------------------------------------------

Function vs Class Component;


*Use function components if you are waiting a presentational component which doesn't have it own states or needs to access
a lifecycle hook. You cannot use setState() in your component because Function Components are plain JavaScript Function.

*Use class Component if you need state or need to access lifecycle hook because all lifecycle hooks are coming from the React.
Component which you extend from in class components.


---------------------------------------------------------------------------------------------
Ref JSXElement to indus.js


JavaScript Expression In JSX 

we can put any valid JavaScript Expression inside the curly braces in JSX. You can pass any JavaScript Expression as children, 
by enclosing it within {}.
example..

*const A = <h1>Sum = {10+20}</h1>

* const name = "malik"
*const A = <h1>{name}</h1>



----------------------------------------------------------------------------------------

Specifying attribute with JSX.

<h1 className = "bg">Hello world</h1>
<h1 htmlFor= "name" >Hello world</h1>
<h1 className =  {ac.tab} >Hello world</h1>

-----------------------------------------------------------------------------------------
ref props.js to index.js
PROPS.....

When React sees an element representing a user-define  component, it pass JSX attribute to this component as a single object. 
We call this object "props".

function Teacher(props) {
    return <h1>Hello {props.name} and {props.id}</h1>
}

ReactDOM.render(<Teacher name="malik" id="101" />, document.getElementById('root'));
ReactDOM.render(<Teacher name="malik" id={100+1} />, document.getElementById('root'));
ReactDOM.render(<Teacher name={"malik"} id=100 />, document.getElementById('root'));


Check type of props data. (npmjs.com prop-type)
install > npm install prop-types

To use props type import first;
import PropTypes from 'prop-types';

Student.propTypes = {

    name: PropTypes.string,
    ArrayData: PropTypes.array,
    FunctionData: PropTypes.func,
    Number: PropTypes.number,
    object: PropTypes.object,
    symbol: PropTypes.symbol

}



----------------------------------------------------------------------------------------------
JSXchild.js to index.js
JSX children.....

In JSX Expression that contain both an opening tag and a closing tag, the content between those tags is passed as a special prop.
props.children

example...
<Student>Im a child<Studnet/>



--------------------------------------------------------------------------------------------------------
State... (ref: state.js to index.js)
It is similar to props, but it is provate and fully controlled by the component. We can create state only in class component. It is possible to update the state/Modify the state.

How to initialize state in React Component:-
*Directly inside class
class Studnet extends Component {
    state = {
        name:"malik",
        age: this.prop.age
    }
    render(){
        ....
    }
}



*Inside the constructor
we use constructor to write state, because constructor call first automatically and initialize the value in memory.


class Studnet extends Component {
    constructor(props){
        // in constructor super must call, it is required to call the parent class constructor.
        super(props)
        this.state = {
            name: "malik",
           age: this.prop.age
        }
    }
    render(){
        ....
    }
}

-----------------------------------------------------------------------------------------------------
Events... (ref event.js to index.js)
Handling events with React element is very similar to Handling events on DOM elements. There are some syntactic difference.
ReactEvent are names using camelCase
With JSX you pass a function as the event handler, rather than a string.

Example..

In html;

<button onclick="fun()">Submit</button>

In React;
<button onClick={fun}>Submit</button> //function Component
<button onClick={this.fun}>Submit</button> //class Component


--------------------------------------------------------------
retrn false;


You cannot return false to prevent default behavior in React. You must call preventDefault explicitly.

In html;
    <a href="https://www.google.com/" onclick="console.log('hello a'); return false">Click Here</a>

In React;

function handlerClick(e){
    e.preventDefault();
}
    <a href="https://www.google.com/" onclick={handlerClick}>Click Here</a>



------------------------------------------------------------------------------------------------------------
update State....

setState() method is used to update states.

this.state = {
    name:"malik"
}

// take argument as a object;               
this.setState({name:"jahangir"});

// take argument as a function;

this.setState(function(state, props){
    return ...
});

------------------------------------------------------------------------------------------------------------
Passing argument to Events handler. (ref: Eventargu.js to indux)



<button onClick={(e)=> this.fun(id,e)}>Delete</button>
or
<button onClick={this.fun(this,id)}>Delete</button>

Note: In both cases, the e argument representing the React event will be passed as a second argument after the ID.




-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
                          Phases of Component... (Mounting, Updating,Error, Unmounting)
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------


this lifecycle method use only in class based component...

Mounting - Mounting is the process of creating an element and inserting it in a DOM tree.
Methods are used to create and inserted into the DOM.
* constructor() ref(mounting.js to index.js)
    initialize local state by assigning an object to this.state
    Ex:- this.State = {name:"malik"}
    Binding event handler method to an instance
    Ex:- this.fun = this.fun(this);

    note: constructor first call..


* static getDerivedStateFromProps() ref(mounting.js to mount.js to index.js)
    this is invoked right before calling the render method, both on the initial mount and on subsequent updates. 
    It should return an object to update the state, or null to update nothing. This method exists for rare use cases
    where the state depends on the changes in props over time. This method doesnot have access to the component instance.
    syntax: static getDerivedStateFromProps(props, state){...  };

    note: getDerivedStateFromProps second call after constructor call..
* render()
    simple run parent child hierarchy.

* componentDidMount()
    componentDidMount is invoked immediately after a component is mounted (insert into the tree), after the render()
    method has taken place.
    This is where AJAX  requests and DOM or state update sould occur. This method is also used for integration with other JS
    frameworks and any function with delayed execution such as setTimeout or setInterval.

    Api call sould be made in componentDidMount method always.
    get data from server and set the data to state.

    Note: it call last after whole app render.

     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Updating - Updating is the process of changing state or props of component and update change to nodes already in the DOM.
     Updating Method...
          *statis getDerivedStateFromProps() (ref: updating.js to update.js to index.js)
          
          *sholdComponentUpdate() (same ref above)
          this is invoked before rendering when new props and state are being received. THis method return true by default.
          Syntax: shouldComponentUpdate(nextProps, nextState) {... }
              
          *render()
          *getSnapshortBeforeUpdate()
          This method is called right before the virtual DOM is about to make change to the DOM (before DOM is updated). 
         

          *componentDidUpdate()
          Jo capture huta hy getSnapshortBeforeUpdate method me wo third parameter hume componentDidUpdate method me milta hy.

          This method is used  to re trigger the third party libraries used to make sure these libraries also update and reload thmselves.
          -componentDidUpdate will not be invoked if should sholdComponentUpdate() return false.
          if not return any thing as a third parameter, so it return undefine.

     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Error Handling(optional phase) - These are used when there is error during rendering, in lifecycle method or in the constructor of any component.
     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Unmounting - Unmounting is the process of removing components from the DOM.
               (ref: unmounting.js to unmount.js to index.js and index.html root= stu)
               componentWillUnmount() before component is unmounted and destroyed it call.
               before removing the component in DOM.



-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
                                        HOOKS in React
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
Hooks are function that let you "hook  into" React state and lifecycle features from function component.
React provides a few built in Hooks like useState, useEffect etc.
Hooks are a new addition in React 16.8

When use Hooks
If you write a function component and realize you need to add some state to it.



Rules Of Hooks..........
*Only call Hooks at the top level - We should not call Hooks inside loops, conditions, or nested functions.
Instead, always use Hooks at the top level of your React Function.

*Only call Hooks from React function - We should not call Hooks from regular JavaScript functions. Instead, call
Hooks from React function components or cell Hooks from custom Hooks.

*React relies on the order in which Hooks are called.

*Hooks don't work inside class.


-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
                                     useState Hook (builting hooks)
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
ref useStae.js to index.js
useState() - useState is a hook that allows you add React state to function component. We call it inside a 
function component to add some local state to it.
useState reaturns a pair -  the current state value and a function that lets you update it.
React will preserve this state between re-renders
You can call this function from an event handler  or somewhere else.

Ex
import React, {useState} from 'react';
useState('malik'); // we now it return two things one is current state and second function, so we assign it in a variable.

const abc = useState('malik');
const x = abc[0]; const y = abc[1]; we assing current state in x and function in y;


or best way using destructing....
const [x, y] = useState('malik');

function App(){
    const [x, y] = useState('malik');
    const [x, y] = useState(101);
    const [x, y] = useState([{sub:"math"}]);

    .....

}

Now Accessing State...
example:

const [name, funName] = useState('malik');

  accessing name and funName....

<h1>Your Name is {name}</h1>

Updating State:

funName('malik');



------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
                                     useEffect Hook (builting hooks)
-------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
ref useEffect.js to index.js
useEffect is a hook for encapsulating code that has 'side effects,' if you re familiar with Ract class lifecycle
methods, you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.
import React, {useStae, useEffect} from 'react';
useEffect(Function)
useEffect(Function, Array) //here array argu is optional.

Note: the function passed to useEffect will run after the render is committed to the screen. 
      Second argument to useEffect that is the array of values that the effect depends on.


     useEffect(()=>{
         console.log('hello world')
     }); 

     useEffect(()=>{
         console.log('hello world')
     }, [count]); 

By usring this Hook, you tell React that your component needs to do something after render. React will remember the function
you passed and call it later after performong the DOM updates. In this effect, we set the document title, we could also perform
data fetching or call some other imperative API.

By default, it runs both after the first render and after every update.




------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                      Custom Hook 
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
ref: customHook2.js to customHook.js to index.js

A custom Hook is a js function whose name stars with 'use' and that may call other hook.
function useSomething(){
    return ....
}

const data = useSomething();


------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                      Conditional Rendering
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
ref: condition.js to conditional.js to condition.js to index.js

Conditional rendering in React works the same way conditions work in JavaScript...
but if/else not work in JSX. in JSX {} we only write expression not conditions.
  <div id ={if(condition){...}}>Hello World</div>
   after bable render it so it change into.
    React.createELement('div', {id: if(condition){...}}, "hello"); // here it is not valid js...

    Solution is...
     if(true){
         return something;
     }


---------------------------------------------------------------------------------------------------

inline.js to inline.js to index.js

Inline if with logical and Operator
You may embed any expression in JSX by wrapping them in curly braces.

Operand 1    Operand 2  Resutl
T              F           F
T              T           T 
T              exp        exp
false          exp        false

or 

true && expression1 && expression2  => get expression2

example:
 purchase && <Payment/> // if value of purchase is true, so Payment are render otherwise component will be ignore.

practise make a app... ref folder condition


---------------------------------------------------------------------------------------------------
Inline if/else with condition Operator 

syntax: condition ? exp1 : exp 2
also see it example in ref folder condition...



----------------------------------------------------------------------------------------------------
IIFE.... it is a js function call itself automatically.
return(
    <div>
                  {

                           // this is IIFE... in this function we write anytype of js code. sometime very useful but less use in projects..
                           (()=>{
                               // your code here...
                           })()


                  }
    </div>
)

also see it example in ref folder condition...



------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                      List in React JS
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
ref list.js to index.js

You can build collection of elemtns and include them in JSX using {}.
example: const arr = [a,b,c,d];
In react we make a list in state..
state = {
    user: [
        {id:101, name:"malik"},
        {id:101, name:"malik"},
        {id:101, name:"malik"},
        {id:101, name:"malik"}
    ],

    isLoggedIn: false
}

Iteration using map() Method
The map method create a new array with result of calling provided function on element in the calling array.
map calls a provided callback function once for each element in an array, in order, and and return a new 
array from the results.

Syntax: map(callback(currentValue, index, array), thisArg);
        map((num, index)=>{return num})

example::
               const arr  = [10, 20, 30,40];
               const newArr = arr.map( num => <li>{num*2}</li> );



------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                      Key in React JS
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------

key.js to index.js
and 
keyUser.js to keyApp.js to index.js

A key is a special string attribute you need to include when creating lists of elements.
Keys help React identify which items have changed, are added, or are removed.
Key should be given to the elements inside the array to give the element a stable identity.
The best way to pick a key is to use a string that uniquely identifies a list item among its sibling.
Most often you would use IDs from your data as keys..
(basically this key is a primary key, real world project it is PK of database)

Example::
         const arr = [10, 20, 30, 40]
         const newArr = arr.map( (num,i )=> (<li key={i} >{num}</li>))
         here index is unique for every object to we assign index as a PK in key value..
         (this is for only example, but it is not valid to make a index as a key value...) 


Another Example::
state = {
    user: [
        {id:101, name:"malik"},
        {id:101, name:"malik"},
        {id:101, name:"malik"},
        {id:101, name:"malik"}
    ],

    isLoggedIn: false
}

const newUser = this.state.user.map(usr => {
    return (
        <h1 key={user.id} > ID: {usr.id} Name: {usr.name}</h1>
    )
})



------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                      Styling Component Inline Style
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------

Styling in CSS have four way...
*Inline Stylesheet.
*External Stylesheet
*CSS module
*CSS in JS.

CSS classes are generally better for performance than inline style.

style are not autoprefixed. Vender prefixes other than ms should begin with a capital letter e.g WebkitTransition has an uppercase "W"
like webkit -ms mozilla etc... 


const btnStyle = {
    color: 'red',
    backgroundColor: 'blue'
}

apply in html
<button style={btnStyle}>Submit</button>


------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                    Styling Component External Stylesheet
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
App.CSS
.txt{
    color:'red';
}

App.js
import './App.CSS'
use
<button className = 'txt'>Submit</button>


------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                    Styling Component CSS Module
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
In inline css we are not use Pseudo classes like hover etc..
In external css, we need must use unique name for every css file property..
So we use CSS module to solution of both problems...

CSS Module
let you use the same CSS class name in different files without worrying about naming clashes.
It is automatically className uniquely assing which format like [filename]\_[className]\_\[hash]

example...
FileName
App.module.css

import style from './App.module.css';
<h1 className={style.txt}>Hello World</h1>


------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                             CSS in JS
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
CSS in JS refers to a pattern where CSS is composed using JavaScript instead of defined in external files. 
This functionality is not a part of React, but provided by third party libraries..
popular libraries..

*Glamorous.
*Styled Component.
*Radium
*Emotion

------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                Image and other asserts Use in React JS
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
ref: Directly in index.js
ref: useAssets folder. Assets.js to index.js......
Acess in two way..

1)Inside the public folder: If you put a file into the public folder, it will not be processed by Webpack.
                            Instead it will be copied into the build foldre untouched.
                            To reference assets in the public foldre, you need to use a special variable 
                            called PUBLIC URL. Only files inside the public folder will be accessible by 
                            %PUBLIC_URL% prefix.
                            example: <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico">

                            Example: how to use...
                            If image in public folder.
                            to use in index.html Directly: <img scr="%PUBLIC_URL%/img.jpg" alt='mypic'/>
                            to use in App.js: <img scr={process.env.PUBLIC_URL + "/img.jpg"} />

                               
2)Inside src folder:

With Webpack using statis assets like image and fonts works similarly to css.
same Import like to import css file in app.js

How to use
App.js
import pic fromt './pic.jpg';
<img src = {pic}/>


Note : The above technique not for only image, it is also apply of all type of assets.


------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                    Add bootstrap In React Js
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
ref Addbootstrap folder;

add css link in index.html.
csslink copy from bootstrap.com.

then use class in app component.
 <button className='btn btn-warning'>Submit</button> 
................................

second way to install bootstrap in our project.
>npm install bootstrap
{/* for internal bootstrap file first import bootstrap file index.js then use in tags. */}


------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                           Form In React Js
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------

HTML form element work a little bit differently from other DOM elements in React, because form elements naturally keep 
some internal state. In HTML form elements such as <input>, <textarea> and <select> typically maintain their own state
and update it based on user input. In React, mutable state in typically kept in the state property of components, and 
only updated with setState()...

Controlled Component.... 
You need to write an event handler for every way your data can change and pipe all of the input state through a React Component.
for example user input data in form capital letter, but you want in small letter. so you write a logic to uppercase to lowercase in control component.

Uncontrolled Component...
You do not need to write an event handler for every way your data can change and pipe all of the input state through a React Component.
refs: Refs provided a way to access DOM nodes or React element create in the render method.
 When we use REFS.
        Managing focus, tex selection, or media playback.
        Triggering imperative animations.
        integrating with third party DOM libraries.

Creating Refs..
        Refs are created using React.createRef() and attached to React elements via the ref attribute.
        example..
        this.myRef = React.createRef();

render(){
    return <h1 ref={this.myRef}>Hello World</h1>
    access ..  const node = this.myRef.current;
}

------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                        Lifting State up In React Js
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
ref: LiftingState folder...

            App.js                           User.js                       Guest.js
       -------------------------         -------------------      --------------------
       |                       |   props |                  |     |                   |
       |state = {name:'malik'} |-------->|                  |     |                   |
       |                       |         |                  |     |                   |
        ------------------------         -------------------       --------------------
                  |_______________________________________________________________|
                                               props

In above diagram show the component of App.js use in user.js and guest.js with with its props.


------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                        Context API In React Js
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
           parent                          child                      grandchild


            App.js                           User.js                       Guest.js
         ------------------------         -------------------      --------------------
        |                       |   props |                  |     |                   |
        |state = {name:'malik'} |-------->|                  |---->|                   |
        |                       |         |                  |     |                   |
         ------------------------         -------------------       --------------------

if we want to use parent props in grandchild, so we need first parent prop pass to child then, from child to grandchild.
if the hierarchy increase to the complexity more. also above case props use in grandchild but not use in child, 
so the solution is use Context api.
Context provide a way to pass data through the component tree without having to pass props down  manually at every level.
In Context api, we pass value from parent to child without any props.


*Passing the initial state to React.createContext. This function then return an object with a Provider and a Consumer.
*Using the Provider component at the top of the tree and making it accept a props called value. This value can e anything.
*Using the Consumer component any where below the Provider in the component tree to get a subset of the state.

1)createContext
const MyContext = React.createContext(defaultValue); default value is optional
defaultValue: it is only used when a component does not have a matching Provider above it in the tree.
const MyContext = React.createContext(false);
const MyContext = React.createContext('white');
const MyContext = React.createContext({user: 'Guest'});

2)Context Provider
Every Context object come with a Provider, React component that allows consuming components to subscribe to context change.
One provider use in different consumer.
Syntax:
  <MyContext.Provider value={/*some value*/}>

A value props to be passed to consuming components that are descendants of this Provider.

3)context Consumer
A React component that subscribe to context changes. 
It require a function as a child. The function recerives the current context value and return a React node.
The value argument passed to the fuction will be equal to the value prop of the closest Provider for this context above in the tree.
If there is no Provider for this context above, the value argument will be equal to the defaultValue that was passed to createContext()

<MyContext.Consumer>
  {value =>  // render something based on the context value }
</MyContext.Consumer>
=============
Context TYpe:
The contexttype property on a class can be assigned a Context object created by React.createContext(). This lets you consume 
the nearest current value of that Context type using this.context.
 static contextType = MyContext;



------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                    Higher Order Component in React
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
ref: HOC folder

A High-Order Component HOC is an advanced technique in React for reusing component logic.
Components use same logic, so use this technique, we write one logic and use in different
component.

HOCs are common in third party React libraries.
A HOC is a function that takes a component and return a new component
Syntax:
  const EnhancedComponent = higherOrderComponent(WrappedComponent);
  or
  const Army = withArm(Men){
      ... here logic
  }



------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                        Error Boundaries in React
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
ref errorBoundaries

Error Boundaries are React component that catch JavaScript errors any where in their child component tree, 
log those errors and display a fallback UI instead of the component tree, log those error, and display a fallback
UI instead of the component tree that crashed. Error Boundaries catch errors during rendering, in lifecycle method,
and in constructor of the whole tree below them.....

If class component become an error boundary, so use getDerivedStateFromError() or componentDidCatch()

Error Boundaries do not catch errors for:
   -Event handlers
   -Asynchrounous code (setTimeout etc requestAnimatedFramecallback)
   -Server side rendering 
   -Error thrown in the error boundary itself (rather than its children)



1) getDerivedStateFromError():  
  This lifecycle method is invoked after an error has been thrown by a descendant component. It receives 
  the error that was thrown as a parameter and should return a value to update state.
  Use static getDerivedStateFromError() to render a fallcack UI after an error has been thrown.
  Syntax 
  static getDerivedStateFromError(error){
    ...
  }

2) componentDidCatch():
  This lifecycle method is invoked afte an error has been thrown by a descendant component.
  Use componentDidCatch() to log error information.
  Syntax
  componentDidCatch(error, info){
      ...
  }
     where, error that was thrown.
            info - An object with a componnentStack key containing information about which 
                   compnent threw the error.




------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                        Strict Mode in React
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------

Strict Mode is a tool for hihlightting potential problems in an application.
it is check are run in development mode only..

Example:
<React.StrictMode>
   <User/>
</React.StrictMode>

It is help: 
       -identifies components with unsafe lifecycle.
       -Warning about legacy string ref API usage.
       -Warning about deprecated findDOMNode usage.
       -Detecting unexpected side effects
       -Detect legacy context API.


------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
                                       What Next In React JS
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------

Update Yourself
Build application
JSON
AJAX
Routing - React Rounter
Design  - Material UI, React-bootstrap
Data-Fetching (http request GET/POST) - Axios
State Management - Redux

